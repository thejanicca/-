import os
import threading
import telebot
from Tools.scripts.objgraph import definitions
from pyexpat.errors import messages
import nltk
from nltk.corpus import wordnet as wn
import time
from main_token import TOKEN
import schedule

# —Å–æ–∑–¥–∞–Ω–∏–µ wordnet
nltk.download("wordnet")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOOKS_DIR = "books"
CHUNK_SIZE = 2000

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∫–Ω–∏–≥
if not os.path.exists(BOOKS_DIR):
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    os.mkdir(BOOKS_DIR)
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: {"current_book": —Ñ–∞–π–ª,
#                       "position": –ø–æ–∑–∏—Ü–∏—è (–∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤)}}
user_data = {}
used = False

def is_start_reading(message):
    return message.text == "–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ"

def is_restart_reading(message):
    return message.text == "–ù–∞—á–∞—Ç—å –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É"

def is_continue_reading(message):
    return message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ"

def is_define_word(message):
    return message.text == "–î–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"

@bot.message_handler(commands=['start'])
def start(message):
    global used
    used = True
    #—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
    user_data[message.from_user.id] = {"current_book": None, "position": 0}
    #—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ")
    btn2 = telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É")
    markup.add(btn1, btn2)

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω–æ–≥–æ –±–æ—Ç–∞! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ —á–∞—Å—Ç—è–º, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –∫ –Ω–∏–º —Å–∏–Ω–æ–Ω–∏–º—ã.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–Ω–∏–≥–æ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ.",
        reply_markup=markup
    )

@bot.message_handler(content_types=['document'])
def handle_document(message):
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not message.document.file_name.endswith('.txt'):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = bot.get_file(message.document.file_id)
    file_path = os.path.join(BOOKS_DIR, f"{message.from_user.id}_{message.document.file_name}")

    with open(file_path, 'wb') as f:
        f.write(bot.download_file(file_info.file_path))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    user_data[message.from_user.id] = {
        "current_book": file_path,
        "position": 0
    }
    #–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ"))

    bot.reply_to(
        message,
        f"–ö–Ω–∏–≥–∞ '{message.document.file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ'.",
        reply_markup=markup
    )

@bot.message_handler(func=is_start_reading)
def start_reading(message):
    #–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
    user_id = message.from_user.id
    if user_id not in user_data or not user_data[user_id]["current_book"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
        return

    send_next_chunk(user_id)

@bot.message_handler(func=is_restart_reading)
def restart_reading(message):
    #–ù–∞—á–∞—Ç—å —á–∏—Ç–∞—Ç—å –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É
    user_id = message.from_user.id
    user_data[user_id] = {"current_book": None, "position": 0}
    bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É.")

@bot.message_handler(func=is_continue_reading)
def continue_reading(message):
    #–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
    send_next_chunk(message.from_user.id)

@bot.message_handler(func=is_define_word, content_types=["text"])
def define_word(message):
    #–î–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    msg = bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
                           reply_markup=telebot.types.ReplyKeyboardMarkup(True))
    bot.register_next_step_handler(msg, give_definition)

def send_next_chunk(user_id):
    #–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –∫–Ω–∏–≥–∏
    if user_id not in user_data:
        return

    book_data = user_data[user_id]
    if not book_data["current_book"] or not os.path.exists(book_data["current_book"]):
        bot.send_message(user_id, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.")
        return

    with open(book_data["current_book"], 'r', encoding='utf-8') as f:
        f.seek(book_data["position"])
        text = f.read(CHUNK_SIZE)

        if not text:
            bot.send_message(user_id, "–í—ã –¥–æ—á–∏—Ç–∞–ª–∏ –∫–Ω–∏–≥—É –¥–æ –∫–æ–Ω—Ü–∞!")
            user_data[user_id]["position"] = 0
            return

        user_data[user_id]["position"] = f.tell()
        bot.send_message(user_id, text)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ")
        btn2 = telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É")
        btn3 = telebot.types.KeyboardButton("–î–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        markup.add(btn1, btn2, btn3)
        bot.send_message(user_id, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞?", reply_markup=markup)

def give_definition(message):
    word = message.text
    synsets = wn.synsets(word)
    if not synsets:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥—É –¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–æ–º—É —Å–ª–æ–≤—É")
        return
    definition = synsets[0].definition()
    synonyms_list = synsets[0].lemma_names()
    try:
        synonyms_list.remove(word)
    except ValueError:
        pass  # –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    synonyms = ", ".join(synonyms_list).rstrip(",")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ")
    btn2 = telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É")
    btn3 =telebot.types.KeyboardButton("–î–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, f"üìñ {word}\n\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {definition}\n–°–∏–Ω–æ–Ω–∏–º—ã: {synonyms}", reply_markup=markup)

def reminder(message):
    global used
    if used is False:
        bot.send_message(message.chat.id, "–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É:)")
    else:
        used = False

def run_threaded(func):
    new_thread = threading.Thread(target=func)
    new_thread.start()

schedule.every().day.at("20:00").do(run_threaded, reminder)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

while True:
    schedule.run_pending()
    time.sleep(1)